# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ContentInput {
  firstLevel: [FirstLevelInput!]!
  secondText: String
  text: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  _id: String!
  content: [EventContent!]!
  createdAt: DateTime!
  endDate: DateTime!
  startDate: DateTime
  tags: [String!]!
  title: String!
  updatedAt: DateTime!
}

type EventContent {
  firstLevel: [FirstLevel!]!
  secondText: String
  text: String
}

type FirstLevel {
  secondLevel: [SecondLevel!]!
  secondText: String
  text: String!
}

input FirstLevelInput {
  secondLevel: [SecondLevelInput!]
  secondText: String
  text: String!
}

type LoginOutput {
  accessToken: String!
  refreshToken: String!
}

type MessageOutput {
  message: String!
}

type Mutation {
  createEvent(content: [ContentInput!]!, endDate: DateTime!, startDate: DateTime, tags: [String!], title: String!): Event!
  deleteEventById(id: String!): Event
  login(email: String!, password: String!): LoginOutput!
  refresh(refreshToken: String!): LoginOutput!
  updateEventById(content: [ContentInput!]!, endDate: DateTime!, id: String!, startDate: DateTime, tags: [String!], title: String!): Event
}

type PaginatedEventsOutput {
  elements: [Event!]
  limit: Int!
  offset: Int!
  totalCount: Int!
}

type Query {
  event(id: String!): Event
  events(filter: String, limit: Float!, offset: Float!): PaginatedEventsOutput!
  testDbConnection: MessageOutput!
  testRedisConnection: MessageOutput!
  testSkipAuth: MessageOutput!
  testToken: MessageOutput!
}

type SecondLevel {
  secondText: String
  text: String!
}

input SecondLevelInput {
  secondText: String
  text: String!
}